package dynhist_test

import (
	"fmt"
	"math/rand"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/vearutop/dynhist-go"
)

func BenchmarkCollector_Add(b *testing.B) {
	b.ReportAllocs()

	c := dynhist.Collector{PrintSum: true}

	for i := 0; i < b.N; i++ {
		c.Add(float64(i))
		c.Add(float64(b.N - i))
	}
}

func TestAvgWidth_Sequence(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
	}

	for i := 0; i < 10000; i++ {
		c.Add(float64(i) / 100)
		c.Add(float64(10000-i) / 100)
	}

	assert.Equal(t, `[   min    max]   cnt total% (20000 events)
[  0.00   8.20]  1641  8.21% ........
[  8.21  16.18]  1596  7.98% .......
[ 16.19  24.15]  1594  7.97% .......
[ 24.16  33.33]  1836  9.18% .........
[ 33.34  46.05]  2544 12.72% ............
[ 46.06  58.77]  2544 12.72% ............
[ 58.78  72.39]  2724 13.62% .............
[ 72.40  86.01]  2724 13.62% .............
[ 86.02  95.19]  1836  9.18% .........
[ 95.20 100.00]   961  4.80% ....
`, c.String())
}

func TestAvgWidth_Negative(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
	}

	for i := 0; i < 10000; i++ {
		c.Add(float64(-i))
		c.Add(float64(i - 10000))
	}

	assert.Equal(t, `[      min       max]   cnt total% (20000 events)
[-10000.00  -9098.00]  1805  9.03% .........
[ -9097.00  -8058.00]  2080 10.40% ..........
[ -8057.00  -7156.00]  1804  9.02% .........
[ -7155.00  -5831.00]  2650 13.25% .............
[ -5830.00  -5001.00]  1660  8.30% ........
[ -5000.00  -4171.00]  1660  8.30% ........
[ -4170.00  -2846.00]  2650 13.25% .............
[ -2845.00  -1944.00]  1804  9.02% .........
[ -1943.00   -619.00]  2650 13.25% .............
[  -618.00      0.00]  1237  6.18% ......
`, c.String())
}

func TestAvgWidth(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
	}
	src := rand.NewSource(1)
	r := rand.New(src)

	for i := 0; i < 10000; i++ {
		c.Add(r.Float64())
	}

	assert.Equal(t, `[ min  max]   cnt total% (10000 events)
[0.00 0.11]  1099 10.99% ..........
[0.11 0.22]  1093 10.93% ..........
[0.22 0.33]  1127 11.27% ...........
[0.33 0.44]  1121 11.21% ...........
[0.44 0.54]   999  9.99% .........
[0.54 0.63]   964  9.64% .........
[0.63 0.73]   953  9.53% .........
[0.73 0.81]   841  8.41% ........
[0.81 0.90]   797  7.97% .......
[0.90 1.00]  1006 10.06% ..........
`, c.String())
}

func TestAvgWidth_Concurrency(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
	}
	concurrencyLimit := 50 // Number of simultaneous jobs.
	limiter := make(chan struct{}, concurrencyLimit)

	for i := 0; i < 10000; i++ {
		i := i
		limiter <- struct{}{} // Reserve limiter slot.

		go func() {
			defer func() {
				<-limiter // Free limiter slot.
			}()

			c.Add(float64(i))
		}()
	}
	// Wait for goroutines to finish by filling full channel.
	for i := 0; i < cap(limiter); i++ {
		limiter <- struct{}{}
	}

	assert.Equal(t, 10000, c.Count)
}

func TestExpWidth(t *testing.T) {
	c := dynhist.Collector{
		WeightFunc: dynhist.ExpWidth(1.2, 0.9),
	}
	src := rand.NewSource(1)
	r := rand.New(src)

	for i := 0; i < 100000; i++ {
		c.Add(r.ExpFloat64())
	}

	assert.Equal(t,
		`[  min   max]    cnt total% (100000 events)
[ 0.00  0.01]    821  0.82%
[ 0.01  0.03]   1970  1.97% .
[ 0.03  0.06]   3259  3.26% ...
[ 0.06  0.16]   8613  8.61% ........
[ 0.16  0.24]   6511  6.51% ......
[ 0.24  0.34]   7547  7.55% .......
[ 0.34  0.59]  15568 15.57% ...............
[ 0.59  0.77]   9219  9.22% .........
[ 0.77  1.02]  10368 10.37% ..........
[ 1.02  1.38]  10993 10.99% ..........
[ 1.38  1.69]   6724  6.72% ......
[ 1.69  2.06]   5684  5.68% .....
[ 2.06  2.50]   4427  4.43% ....
[ 2.50  3.05]   3524  3.52% ...
[ 3.05  4.01]   2955  2.96% ..
[ 4.01  5.17]   1250  1.25% .
[ 5.17  6.56]    433  0.43%
[ 6.58  8.43]    118  0.12%
[ 8.47  8.50]      2  0.00%
[ 8.59 10.80]     14  0.01%
`, c.String())
}

var (
	// nolint:unused // False positive.
	latencyPoints = []float64{
		478.11, 481.30, 481.66, 482.90, 482.47, 484.30, 486.90, 489.22, 486.10, 487.81, 486.75, 489.43, 487.82, 488.36, 488.74, 490.96, 489.96, 503.59, 523.93, 525.70, 524.11, 525.28, 526.00, 528.14, 527.18, 526.81, 527.06, 529.36, 528.31, 531.18, 529.42, 532.92, 531.25, 532.34, 532.31, 533.28, 534.33, 537.16, 537.60, 537.60, 537.12, 538.87, 539.44, 543.87, 543.48, 543.28, 545.83, 543.11, 545.40, 546.91, 102.63, 112.70, 106.72, 104.08, 109.78, 108.49, 158.29, 148.90, 148.33, 156.73, 149.90, 139.31, 109.52, 155.98, 125.00, 117.30, 119.45, 118.05, 123.98, 117.35, 125.11, 124.16, 168.78, 161.70, 162.69, 171.52, 169.43, 185.27, 172.15, 180.32, 180.56, 192.12, 182.78, 182.34, 182.45, 242.45, 249.94, 247.14, 240.70, 242.60, 208.35, 200.25, 205.63, 189.01, 186.99, 239.99, 184.89, 247.44, 243.54, 253.44, 241.77, 253.68, 213.31, 169.76, 226.95, 170.70, 170.95, 182.71, 185.45, 195.68, 200.11, 133.78, 135.27, 137.34, 225.90, 225.89, 147.55, 241.70, 230.71, 246.59, 246.53, 248.09, 249.67, 250.05, 237.84, 237.91, 251.64, 247.61, 121.70, 129.47, 128.55, 204.59, 185.29, 187.28, 198.51, 186.85, 185.68, 185.88, 188.15, 188.48, 193.13, 200.92, 195.02, 196.44, 206.75, 217.87, 219.72, 123.50, 166.09, 115.18, 134.91, 180.98, 186.82, 189.82, 191.34, 94.89, 100.20, 107.80, 110.14, 105.27, 195.27, 180.28, 204.13, 191.78, 191.03, 206.59, 123.53, 125.87, 125.25, 118.42, 124.81, 129.63, 186.03, 203.34, 191.08, 182.26, 177.52, 195.85, 217.72, 177.40, 197.34, 207.17, 168.59, 166.48, 210.53, 175.04, 167.76, 220.80, 178.14, 206.33, 205.93, 142.27, 107.58, 207.33, 225.87, 198.24, 227.37, 222.88, 238.88, 244.16, 235.79, 240.33, 124.32, 145.59, 235.26, 211.50, 225.69, 229.46, 206.74, 201.94, 224.95, 209.44, 138.49, 124.97, 128.92, 135.99, 185.87, 206.74, 191.30, 219.30, 207.49, 225.69, 217.60, 199.40, 174.61, 215.72, 231.46, 197.89, 206.87, 205.05, 198.40, 224.57, 223.33, 210.29, 197.40, 228.70, 197.76, 201.88, 217.69, 217.79, 209.40, 220.59, 238.71, 155.81, 179.76, 169.88, 186.68, 188.79, 183.79, 184.46, 191.47, 201.70, 199.21, 199.62, 176.11, 178.96, 183.06, 200.51, 201.28, 201.55, 202.24, 202.45, 158.49, 142.26, 159.51, 167.48, 169.41, 160.45, 184.20, 185.51, 182.09, 153.18, 149.32, 172.58, 123.56, 128.90, 126.72, 112.08, 129.34, 202.27, 203.18, 197.86, 141.64, 138.55, 142.22, 133.77, 147.73, 133.79, 189.29, 179.46, 192.15, 185.69, 200.86, 198.72, 187.48, 151.65, 182.89, 174.88, 175.59, 174.84, 178.12, 142.70, 164.70, 169.59, 183.99, 130.62, 130.26, 129.78, 175.21, 154.98, 157.23, 151.80, 163.34, 158.89, 185.11, 150.96, 141.96, 150.33, 165.65, 177.15, 186.12, 186.37, 165.91, 168.05, 182.00, 168.69, 209.51, 208.43, 209.49, 207.90, 196.73, 174.16, 191.20, 191.91, 143.90, 131.20, 151.37, 213.75, 195.63, 137.25, 151.56, 169.79, 179.02, 133.99, 138.74, 135.30, 146.64, 140.69, 142.86, 164.91, 164.10, 144.34, 126.51, 158.50, 125.19, 166.77, 163.77, 162.03, 165.91, 185.85, 116.24, 116.29, 130.29, 129.63, 165.06, 165.41, 169.71, 131.48, 126.61, 128.27, 137.17, 138.61, 140.65, 186.15, 194.73, 189.57, 208.11, 132.38, 133.58, 177.04, 154.71, 158.50, 163.41, 168.15, 168.38, 168.12, 186.34, 194.36, 194.29, 202.25, 205.39, 212.14, 126.55, 124.85, 174.49, 171.25, 142.89, 169.54, 169.92, 180.44, 176.75, 180.74, 181.16, 181.06, 118.83, 185.72, 103.04, 123.19, 117.72, 122.07, 106.35, 116.90, 151.68, 162.96, 170.34, 138.07, 165.88, 139.23, 138.28, 177.84, 182.35, 172.36, 159.76, 181.10, 226.95, 139.44, 158.77, 161.05, 154.69, 162.51, 158.75, 215.40, 171.73, 233.45, 226.75, 189.68, 192.84, 165.69, 174.90, 197.93, 197.91, 175.51, 174.78, 212.81, 179.09, 182.25, 220.25, 221.25, 209.81, 205.25, 215.94, 234.75, 229.34, 226.63, 230.99, 231.79, 227.51, 233.90, 239.47, 218.80, 229.62, 232.73, 221.63, 138.69, 140.37, 180.78, 201.89, 185.02, 188.74, 193.45, 151.96, 197.09, 199.89, 153.81, 170.02, 145.81, 307.42, 157.58, 280.29, 187.85, 190.68, 201.33, 182.41, 189.58, 198.92, 218.67, 234.43, 224.26, 207.32, 256.85, 166.66, 171.87, 198.39, 165.78, 171.00, 183.75, 160.34, 189.14, 189.41, 259.22, 238.59, 205.19, 182.27, 170.36, 303.64, 199.27, 217.94, 224.40, 311.34, 224.16, 313.47, 466.32, 216.06, 202.46, 467.19, 191.35, 476.15, 210.65, 237.41, 230.52, 175.85, 181.95, 217.56, 180.59, 185.28, 185.02, 243.33, 218.34, 280.95, 273.81, 259.75, 220.32, 402.22, 387.20, 402.84, 405.13, 393.20, 406.15, 403.80, 390.76, 368.63, 365.72, 305.89, 356.90, 396.30, 268.79, 270.87, 271.30, 271.37, 271.25, 272.72, 289.06, 315.85, 274.71, 323.02, 267.19, 279.21, 297.37, 306.02, 299.66, 312.17, 314.06, 284.11, 256.94, 256.85, 452.03, 455.09, 453.86, 458.07, 258.41, 255.31, 249.76, 317.21, 481.73, 244.54, 253.21, 267.21, 274.44, 284.77, 282.06, 277.48, 320.84, 183.09, 183.11, 268.31, 295.06, 323.17, 321.85, 628.91, 285.87, 303.50, 296.08, 311.84, 340.46, 297.32, 310.89, 317.91, 208.18, 221.32, 212.14, 196.77, 256.29, 266.05, 226.66, 268.56, 278.97, 278.89, 282.44, 167.54, 290.70, 291.31, 218.70, 199.47, 195.71, 201.79, 292.20, 165.95, 230.36, 168.72, 230.32, 310.28, 194.24, 220.74, 231.11, 197.27, 233.54, 197.10, 165.44, 178.70, 206.85, 190.18, 183.20, 243.29, 212.17, 237.53, 262.61, 244.24, 248.59, 191.15, 136.94, 221.16, 205.15, 184.53, 197.98, 200.18, 223.83, 205.74, 159.75, 239.12, 252.06, 240.34, 237.03, 167.54, 179.96, 173.52, 178.54, 187.32, 179.91, 163.28, 160.82, 161.04, 168.83, 166.85, 169.40, 190.01, 170.13, 142.16, 124.14, 190.96, 199.17, 171.25, 164.41, 197.87, 160.92, 168.61, 205.27, 174.54, 163.38, 168.60, 175.57, 176.56, 174.47, 154.85, 237.85, 227.02, 233.35, 231.65, 233.35, 176.36, 209.06, 257.06, 258.16, 265.55, 251.72, 258.76, 253.56, 278.44, 254.10, 267.79, 254.62, 216.48, 263.35, 243.80, 181.68, 182.31, 252.40, 232.03, 249.54, 244.57, 250.55, 168.41, 172.41, 173.41, 168.42, 223.18, 228.70, 235.76, 242.63, 251.37, 254.33, 248.89, 250.54, 204.20, 150.52, 129.81, 130.52, 241.04, 242.00, 252.00, 256.10, 266.24, 275.31, 228.53, 265.55, 262.83, 271.78, 172.72, 174.04, 201.90, 179.83, 146.74, 223.38, 202.83, 200.13, 206.88, 199.76, 205.84, 202.66, 207.38, 208.36, 229.74, 210.95, 223.72, 234.65, 145.79, 147.48, 147.73, 179.34, 219.06, 218.52, 226.68, 227.79, 213.70, 223.54, 163.58, 143.71, 144.78, 220.91, 231.64, 223.49, 202.94, 230.56, 240.12, 205.71, 241.45, 211.89, 141.22, 181.78, 160.99, 225.46, 186.75, 206.14, 208.38, 188.45, 187.68, 188.96, 209.64, 165.94, 168.79, 168.17, 167.59, 161.48, 163.21, 232.21, 269.87, 230.08, 271.19, 201.87, 195.89, 200.02, 197.74, 171.83, 172.73, 163.96, 187.26, 237.25, 203.77, 205.60, 201.28, 205.06, 183.54, 250.05, 253.06, 150.70, 163.90, 172.58, 248.37, 244.73, 257.68, 311.84, 262.61, 263.22, 272.83, 269.02, 266.91, 273.72, 234.72, 342.37, 343.11, 329.92, 330.55, 345.45, 344.31, 288.70, 289.54, 351.32, 337.22, 288.37, 233.92, 234.93, 308.96, 282.57, 308.50, 284.04, 281.00, 310.33, 274.56, 298.79, 254.31, 300.86, 332.98, 277.17, 337.76, 339.46, 318.29, 261.57, 190.43, 175.35, 290.04, 281.37, 292.04, 287.56, 287.78, 294.74, 298.80, 317.10, 292.97, 109.29, 118.65, 117.40, 119.75, 235.72, 215.03, 137.92, 217.34, 138.92, 131.13, 129.58, 129.20, 128.77, 158.31, 159.08, 245.19, 257.15, 119.71, 120.89, 141.83, 150.69, 143.66, 116.23, 150.23, 151.65, 130.76, 137.20, 135.19, 132.21, 161.08, 190.73, 191.21, 164.97, 190.40, 166.03, 98.84, 99.72, 100.24, 124.44, 97.93, 103.32, 140.10, 138.64, 140.95, 153.95, 145.74, 147.35, 178.90, 182.47, 142.76, 182.31, 207.44, 132.44, 126.50, 138.16, 188.82, 159.06, 162.35, 159.25, 171.57, 165.83, 179.08, 186.88, 182.19, 178.71, 176.36, 134.23, 170.76, 172.10, 168.88, 137.32, 128.54, 142.86, 141.73, 138.99, 148.67, 158.50, 157.77, 158.52, 150.96, 169.60, 161.70, 157.54, 171.15, 206.00, 202.56, 201.90, 127.74, 122.76, 94.22, 125.88, 131.52, 147.62, 153.80, 148.91, 152.04, 148.00, 151.25, 147.82, 193.08, 109.82, 215.52, 130.45, 121.89, 94.59, 127.09, 115.50, 140.32, 133.74, 134.70, 116.39, 118.04, 118.46, 112.19, 149.17, 146.29, 200.35, 102.99, 98.10, 108.01, 110.61, 108.78, 111.44, 153.37, 106.26, 111.93, 110.90, 127.19, 126.54, 146.93, 153.29, 164.17, 164.84,
	}
	latencyPoints2 = []float64{
		42.23, 43.20, 44.57, 44.62, 44.02, 44.56, 47.65, 47.60, 48.27, 47.01, 51.36, 54.62, 54.98, 56.24, 57.16, 58.86, 59.72, 61.08, 61.16, 62.72, 64.10, 64.22, 62.96, 62.84, 66.17, 70.03, 71.69, 83.87, 83.35, 86.03, 88.22, 85.85, 85.74, 86.38, 86.69, 88.61, 86.66, 88.60, 91.75, 89.04, 92.45, 95.55, 95.93, 94.91, 97.81, 99.13, 99.15, 101.63, 101.24, 104.05, 100.11, 83.84, 74.66, 89.37, 92.99, 92.51, 61.23, 66.04, 63.10, 60.94, 108.13, 107.07, 112.39, 111.83, 108.31, 101.90, 107.55, 107.35, 102.16, 109.37, 114.91, 73.77, 102.77, 104.09, 79.87, 105.87, 108.83, 113.27, 103.43, 91.82, 104.84, 103.93, 104.24, 103.33, 99.84, 104.93, 105.41, 104.70, 97.56, 95.58, 95.01, 129.98, 145.71, 131.73, 131.27, 131.76, 130.98, 136.10, 141.49, 135.63, 84.78, 85.46, 93.49, 137.27, 91.34, 92.56, 122.98, 95.50, 148.36, 137.94, 148.30, 140.33, 145.71, 150.82, 139.02, 156.54, 156.06, 148.32, 160.17, 142.20, 145.07, 140.60, 117.87, 116.89, 170.06, 173.94, 153.31, 154.03, 128.80, 123.83, 164.75, 131.93, 184.11, 170.38, 168.69, 156.49, 171.56, 145.58, 152.03, 152.08, 152.69, 152.31, 153.47, 151.83, 159.57, 124.84, 128.17, 130.07, 94.92, 91.40, 141.83, 71.95, 72.91, 73.34, 155.10, 111.36, 81.04, 105.50, 114.19, 113.70, 96.38, 110.49, 106.64, 127.19, 111.16, 117.02, 115.59, 188.16, 182.65, 138.35, 137.90, 125.62, 191.54, 156.88, 121.00, 119.87, 182.27, 159.07, 132.43, 138.21, 127.70, 141.64, 138.96, 159.84, 133.14, 155.26, 170.46, 191.18, 206.57, 186.11, 158.42, 168.96, 184.78, 158.15, 161.11, 167.47, 168.89, 164.97, 168.65, 158.76, 157.50, 124.24, 175.76, 161.93, 176.46, 206.96, 139.63, 142.74, 133.26, 183.52, 169.95, 154.81, 158.27, 149.85, 139.54, 142.29, 219.05, 159.47, 192.15, 157.28, 178.23, 157.01, 123.73, 181.59, 158.57, 153.06, 155.93, 143.63, 127.35, 165.21, 166.14, 159.36, 171.77, 175.06, 163.23, 166.30, 155.25, 142.84, 154.91, 126.55, 157.65, 145.24, 147.34, 148.00, 145.49, 144.60, 97.27, 96.60, 100.83, 97.03, 114.88, 104.49, 127.24, 127.92, 122.86, 115.43, 123.56, 113.22, 124.34, 123.81, 120.29, 126.61, 127.85, 133.70, 126.91, 122.55, 130.68, 74.92, 114.00, 154.45, 155.56, 131.80, 148.97, 137.12, 117.36, 79.17, 77.65, 78.10, 67.39, 73.91, 75.65, 75.12, 63.49, 62.47, 115.53, 109.27, 110.75, 110.54, 97.59, 106.90, 104.62, 100.19, 101.93, 110.24, 80.30, 108.28, 120.80, 107.30, 81.94, 109.82, 115.16, 91.53, 69.35, 87.13, 78.96, 63.43, 75.49, 66.27, 101.80, 103.05, 102.00, 91.86, 92.00, 100.98, 107.59, 102.38, 88.32, 89.26, 90.19, 81.45, 84.24, 81.93, 93.45, 89.27, 85.18, 86.72, 94.64, 114.26, 109.18, 71.92, 73.44, 72.71, 82.11, 85.18, 85.05, 84.00, 84.39, 88.41, 89.63, 87.15, 131.13, 132.13, 136.62, 137.70, 137.78, 94.59, 92.22, 95.25, 93.00, 99.54, 96.47, 64.84, 66.96, 113.23, 105.52, 102.21, 102.62, 107.70, 112.98, 135.16, 109.80, 115.67, 134.18, 124.30, 141.73, 113.58, 106.77, 114.25, 113.34, 128.32, 109.82, 144.23, 109.75, 114.80, 120.60, 140.20, 117.58, 116.82, 108.82, 96.50, 92.05, 99.13, 115.76, 124.07, 124.25, 131.12, 121.46, 120.66, 114.31, 113.04, 121.25, 116.32, 114.24, 117.06, 121.60, 117.31, 114.56, 122.40, 115.10, 77.58, 78.07, 70.62, 71.20, 77.34, 72.81, 79.88, 121.40, 123.36, 94.46, 92.43, 129.52, 93.31, 103.09, 102.38, 98.19, 100.21, 100.15, 99.61, 100.72, 104.63, 107.00, 102.40, 104.32, 106.13, 110.25, 103.16, 112.09, 118.58, 118.72, 90.27, 63.45, 59.65, 60.88, 63.33, 93.09, 77.91, 73.90, 72.44, 76.31, 74.68, 81.40, 73.43, 73.65, 74.31, 74.64, 74.95, 75.49, 76.63, 50.91, 47.76, 57.46, 36.17, 38.65, 66.96, 86.87, 54.34, 55.56, 64.59, 72.30, 71.80, 66.53, 74.83, 65.84, 60.65, 49.99, 47.89, 50.33, 51.47, 45.54, 47.81, 39.08, 39.07, 38.97, 50.63, 53.98, 53.85, 51.84, 30.39, 31.99, 47.29, 52.31, 53.09, 54.21, 53.03, 57.68, 60.18, 60.24, 58.59, 48.65, 32.72, 45.65, 48.25, 50.21, 43.33, 42.59, 42.44, 53.46, 43.66, 61.44, 62.66, 61.54, 64.55, 64.14, 64.14, 53.19, 57.67, 44.59, 39.63, 43.65, 42.79, 48.84, 53.85, 49.85, 53.92, 54.80, 42.41, 46.70, 59.81, 65.04, 48.04, 46.19, 48.72, 52.55, 49.41, 59.05, 49.01, 46.22, 45.71, 65.77, 64.75, 52.79, 56.97, 53.70, 57.46, 54.49, 82.96, 84.19, 71.90, 60.67, 67.48, 65.91, 68.04, 72.70, 70.31, 53.14, 51.64, 53.85, 65.27, 65.95, 59.88, 58.58, 77.40, 78.94, 77.61, 75.43, 73.80, 74.22, 75.03, 74.40, 78.58, 66.93, 68.07, 65.83, 84.29, 77.42, 80.52, 77.98, 80.34, 67.26, 98.93, 98.32, 95.42, 91.54, 94.79, 95.91, 94.31, 56.98, 43.81, 78.68, 71.96, 72.13, 81.48, 44.66, 46.48, 75.94, 75.66, 64.79, 77.43, 50.21, 46.94, 44.61, 88.79, 90.35, 82.15, 85.62, 70.58, 83.93, 85.76, 83.93, 71.86, 71.26, 86.08, 56.97, 57.97, 40.15, 59.65, 61.38, 60.88, 61.97, 59.49, 48.71, 61.17, 54.62, 59.23, 55.40, 54.93, 56.96, 60.02, 62.93, 58.65, 54.93, 62.19, 61.63, 79.80, 80.76, 80.52, 42.44, 39.81, 37.98, 38.67, 49.72, 48.67, 69.16, 67.63, 63.98, 55.43, 54.05, 61.00, 50.97, 52.65, 38.94, 39.93, 55.94, 63.90, 58.96, 57.32, 64.62, 73.02, 54.35, 55.41, 68.67, 55.70, 53.77, 65.89, 66.38, 68.68, 55.71, 68.89, 69.88, 60.41, 70.49, 63.68, 64.91, 65.32, 63.78, 63.02, 67.24, 65.88, 64.85, 57.27, 71.77, 69.10, 74.55, 68.00, 75.83, 65.16, 65.84, 62.86, 89.29, 76.39, 77.15, 78.12, 87.96, 88.49, 104.78, 105.12, 90.40, 105.45, 103.94, 89.66, 102.41, 87.16, 131.45, 119.56, 133.42, 119.45, 122.64, 135.42, 116.00, 121.43, 133.79, 120.00, 123.62, 118.29, 120.39, 124.01, 137.63, 136.49, 123.31, 136.78, 138.29, 121.78, 120.59, 115.55, 122.74, 117.75, 134.74, 135.79, 134.24, 121.29, 144.14, 144.82, 145.14, 142.82, 146.38, 146.84, 140.63, 143.67, 145.70, 128.78, 131.07, 160.75, 160.86, 162.47, 96.35, 97.97, 98.93, 66.34, 71.59, 68.17, 68.45, 69.47, 72.16, 72.99, 108.74, 76.12, 125.77, 94.71, 95.11, 95.45, 95.86, 98.08, 97.18, 95.05, 97.71, 128.39, 132.86, 102.87, 98.32, 132.25, 99.35, 54.90, 50.61, 57.92, 57.29, 74.13, 76.54, 81.02, 51.79, 53.30, 54.63, 69.53, 83.57, 65.78, 51.86, 64.53, 61.27, 49.47, 48.25, 60.84, 62.13, 76.15, 74.08, 69.97, 62.82, 73.47, 42.67, 40.54, 66.32, 65.38, 65.87, 72.89, 68.29, 49.59, 50.90, 51.37, 48.95, 50.80, 82.14, 84.96, 73.45, 82.71, 78.05, 50.74, 50.42, 50.24, 37.75, 46.24, 41.29, 61.41, 37.44, 39.95, 56.32, 56.44, 62.57, 58.47, 56.61, 60.28, 65.82, 41.17, 77.11, 45.52, 54.14, 70.26, 60.15, 59.98, 61.28, 59.69, 60.87, 53.26, 41.19, 70.94, 67.58, 65.80, 71.17, 45.80, 50.97, 45.44, 66.65, 67.31, 51.92, 52.63, 92.51, 91.49, 83.85, 85.28, 80.72, 81.96, 94.43, 95.99, 97.02, 101.74, 99.18, 103.01, 95.86, 101.01, 110.22, 98.76, 100.59, 92.44, 120.20, 115.10, 120.89, 112.74, 114.98, 107.18, 106.77, 110.21, 83.66, 76.67, 74.15, 75.26, 94.76, 96.14, 97.07, 92.51, 98.68, 98.18, 111.21, 107.42, 47.45, 49.86, 112.18, 102.76, 43.68, 50.74, 58.25, 51.93, 119.96, 123.55, 62.04, 57.31, 64.09, 63.84, 59.09, 55.46, 41.48, 42.98, 53.52, 61.70, 52.77, 53.94, 53.92, 50.25, 51.87, 73.64, 59.17, 57.07, 43.92, 38.11, 36.40, 53.48, 48.43, 54.82, 48.97, 47.35, 57.29, 56.44, 47.19, 63.93, 64.42, 64.58, 65.12, 61.28, 60.87, 55.22, 62.10, 68.68, 49.78, 63.61, 50.18, 57.66, 50.89, 61.93, 45.50, 41.68, 70.39, 69.62, 40.06, 73.93, 162.38, 70.77, 39.85, 40.51, 39.46, 61.26, 42.40, 79.04, 90.27, 89.93, 69.01, 70.40, 69.79, 46.48, 47.81, 56.46, 50.67, 58.12, 57.95, 51.64, 58.38, 65.67, 58.25, 70.54, 48.02, 70.71, 51.56, 52.52, 89.40, 90.57, 88.52, 75.41, 74.19, 75.45, 76.14, 72.09, 72.28, 72.96, 83.82, 83.10, 85.32, 84.82, 403.48, 405.09, 418.61, 424.96, 471.94, 488.97, 508.03, 548.74, 1077.81, 1077.41, 1079.33, 1079.37, 1079.80, 1079.22, 1086.49, 1089.04, 1109.51, 1109.33,
	}
)

func TestLatencyWidth(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 30,
		WeightFunc:   dynhist.ExpWidth(0.35, 0.2),
	}

	points := latencyPoints2

	for _, v := range points {
		c.Add(v)
	}

	precise := dynhist.Collector{
		BucketsLimit: len(points),
	}

	for _, v := range points {
		precise.Add(v)
	}

	for _, percent := range []float64{50, 70, 90, 95, 99, 99.9} {
		expected := precise.Percentile(percent)
		assert.InDelta(t, expected, c.Percentile(percent), 0.1*expected, "percentile: %.2f", percent)
	}
}

func TestLatencyWidth_2(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
		WeightFunc:   dynhist.ExpWidth(1.4, 0.8),
	}

	for _, v := range latencyPoints2 {
		c.Add(v)
	}

	assert.Equal(t, `[    min     max]  cnt total% (1000 events)
[  30.39   32.72]    3  0.30%
[  36.17   52.52]  129 12.90% ............
[  52.55   66.04]  187 18.70% ..................
[  66.17   98.18]  292 29.20% .............................
[  98.19  130.68]  212 21.20% .....................
[ 130.98  159.07]  112 11.20% ...........
[ 159.36  219.05]   47  4.70% ....
[ 403.48  488.97]    6  0.60%
[ 508.03  548.74]    2  0.20%
[1077.41 1109.51]   10  1.00% .
`, c.String())
}

func TestLatencyWidth_PrintSum(t *testing.T) {
	c := dynhist.Collector{
		BucketsLimit: 10,
		WeightFunc:   dynhist.ExpWidth(1.4, 0.8),
		PrintSum:     true,
	}

	for _, v := range latencyPoints2 {
		c.Add(v)
	}

	assert.Equal(t, `[    min     max]  cnt total%       sum (1000 events)
[  30.39   32.72]    3  0.30%     95.10
[  36.17   52.52]  129 12.90%   5944.18 ............
[  52.55   66.04]  187 18.70%  11151.41 ..................
[  66.17   98.18]  292 29.20%  23732.52 .............................
[  98.19  130.68]  212 21.20%  23858.78 .....................
[ 130.98  159.07]  112 11.20%  16113.69 ...........
[ 159.36  219.05]   47  4.70%   8185.44 ....
[ 403.48  488.97]    6  0.60%   2613.05
[ 508.03  548.74]    2  0.20%   1056.77
[1077.41 1109.51]   10  1.00%  10867.31 .
`, c.String())
}

func TestLearnLatency(t *testing.T) {
	t.Skip()
	// points := append(latencyPoints, latencyPoints2...)
	points := latencyPoints
	rand.Shuffle(len(points), func(i, j int) { points[i], points[j] = points[j], points[i] })

	precise := dynhist.Collector{
		BucketsLimit: len(points),
	}

	for _, v := range points {
		precise.Add(v)
	}

	percentiles := []float64{50, 70, 90, 95, 99, 99.9}
	precisePercentiles := make(map[float64]float64, len(percentiles))

	for _, percent := range percentiles {
		precisePercentiles[percent] = precise.Percentile(percent)
	}

	minDelta := 10000.0
	bestSumWidthPow := 0.0
	bestSpacingPow := 0.0

	for sumWidthPow := 0.0; sumWidthPow < 2.0; sumWidthPow += 0.05 {
		for spacingPow := 0.0; spacingPow < 2.0; spacingPow += 0.05 {
			c := dynhist.Collector{WeightFunc: dynhist.ExpWidth(sumWidthPow, spacingPow)}

			for _, v := range points {
				c.Add(v)
			}

			maxDelta := 0.0

			for _, percent := range percentiles {
				percentile := c.Percentile(percent)
				// Approximate percentile is always greater or equal than precise value.
				delta := (percentile - precisePercentiles[percent]) / precisePercentiles[percent]
				if delta > maxDelta {
					maxDelta = delta
				}
			}

			if maxDelta < minDelta {
				minDelta = maxDelta
				bestSumWidthPow = sumWidthPow
				bestSpacingPow = spacingPow
			}
		}
	}

	fmt.Printf("%.2f %.2f %.2f\n", minDelta, bestSumWidthPow, bestSpacingPow)
}
